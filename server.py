from concurrent import futures
import logging
import grpc
import auth_pb2, auth_pb2_grpc

# Implementation of the authentication service.
class Auth(auth_pb2_grpc.AuthServicer):
    def Login(self, request, context):
        print('username: %s' % request.username)
        print('pwd: %s' % request.pwd)
        return auth_pb2.LoginResponse(result='gRPC Response c:')
    
def serve():
    port = '50051'
    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))
    auth_pb2_grpc.add_AuthServicer_to_server(Auth(), server)
    server.add_insecure_port('[::]:' + port)
    server.start()
    print("Server started, listening on " + port)
    server.wait_for_termination()

if __name__ == '__main__':
    logging.basicConfig()
    serve()
